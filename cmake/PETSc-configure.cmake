cmake_minimum_required(VERSION 3.1)
project(petsc-download)
include(ExternalProject)
    # Compile PETSc 
    ExternalProject_Add(
        PETSc
        URL http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.7.2.tar.gz
        PREFIX ${CMAKE_BINARY_DIR}/_deps/PETSc
        INSTALL_DIR ${CMAKE_BINARY_DIR}/_deps/PETSc
        CONFIGURE_COMMAND cd <SOURCE_DIR> && ./configure --with-pic=true --with-shared-libraries=0 --prefix=<INSTALL_DIR> --with-debugging=0 --with-64-bit-indices=1 --with-single-library=1 
        BUILD_COMMAND make -C <SOURCE_DIR>
        INSTALL_COMMAND make -C <SOURCE_DIR> install
    )
    
#    # Touch include directories for PETScfloat and PETScdouble to pass 
#    # generation phase without causing an error because the directory doesn't exist
#    ExternalProject_Get_Property(PETSc INSTALL_DIR)
#    file(MAKE_DIRECTORY ${INSTALL_DIR}/lib/petsc/conf/)
#    file(TOUCH ${INSTALL_DIR}/lib/petsc/conf/variables)
#    #set(PETSc_INCLUDE_DIR ${INSTALL_DIR}/include)
#    
#    # A temporary makefile to probe the PETSc configuration
#    message("INSTALL_DIR " ${INSTALL_DIR})
#    set (petsc_config_makefile "${INSTALL_DIR}/Makefile.petsc")
#    set (petsc_conf_variables "${INSTALL_DIR}/lib/petsc/conf/variables")
#    file (WRITE "${petsc_config_makefile}"
#"## This file was autogenerated by FindPETSc.cmake
## PETSC_DIR  = ${PETSC_DIR}
## PETSC_ARCH = ${PETSC_ARCH}
#include ${petsc_conf_variables}
#show :
#\t-@echo -n \${\${VARIABLE}}
#")
#
#    macro (PETSC_GET_VARIABLE name var)
#        set (${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
#        execute_process (COMMAND make --no-print-directory -f ${petsc_config_makefile} show VARIABLE=${name}
#            OUTPUT_VARIABLE ${var}
#            RESULT_VARIABLE petsc_return)
#    endmacro (PETSC_GET_VARIABLE)
#    petsc_get_variable (PETSC_LIB_DIR            petsc_lib_dir)
#    petsc_get_variable (LIBNAME            libname)
#    petsc_get_variable (PETSC_EXTERNAL_LIB_BASIC petsc_libs_external)
#    petsc_get_variable (PETSC_CC_INCLUDES            petsc_include)
#
#    # Set explicit include/library variables to match those set in
#    # FindPETSc.cmake
#    # TODO Figure out how to expose a proper Petsc::Petsc target in
#    # FindPETSc.cmake; seems broken at the moment.
#    set(PETSC_LIBRARIES 
#         "${libname}"
#         "${petsc_libs_external}"
#         )
#     set(PETSC_INCLUDES
#         "${petsc_include}"
#         )
#     set(PETSC_INCLUDE_DIRS 
#         "${petsc_include}"
#         )
#
#     message("PETSC_LIBRARIES " ${PETSC_LIBRARIES})
